name: deploy-prod

on:
  push:
    branches: [ DeployAirflowAzure ]

jobs:
  test-api:
    env:
      DATABASE_URL: mongodb://localhost:27017/test?retryWrites=true&w=majority
      MONGO_INITDB_DATABASE: test
      PYTHON_ENV: testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.8.0
      with:
        mongodb-version: "4.2"
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
        restore-keys: | 
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
    - name: Run pytest
      run: | 
        pytest --disable-warnings api/tests/
    
  test-entrainement:
    env:
      DATABASE_URL: mongodb://localhost:27017/test?retryWrites=true&w=majority
      MONGO_INITDB_DATABASE: test
      SELENIUM_HOST: http://localhost:4444
      PYTHON_ENV: testing
      VISUAL_CROSSING_KEY: ${{ secrets.VISUAL_CROSSING_KEY }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.8.0
      with:
        mongodb-version: "4.2"
    - name: Mongo import
      run: |
        curl -sLO https://repo.mongodb.org/apt/ubuntu/dists/bionic/mongodb-org/5.0/multiverse/binary-amd64/mongodb-database-tools_100.5.1_amd64.deb
        sudo dpkg -i mongodb-database-tools_100.5.1_amd64.deb
        ls -la
        mongoimport --jsonArray --host=localhost --port=27017 --db test --collection stations --file initMongo/dataMongo/stations.json
        mongoimport --jsonArray --host=localhost --port=27017 --db test --collection schoolVacations --file initMongo/dataMongo/schoolVacations.json
        mongoimport --jsonArray --host=localhost --port=27017 --db test --collection riskStations --file initMongo/dataMongo/riskStations.json
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Installing package list
      run: apt list --installed    
    - name: Removing previous chrome instances on runner 
      run: sudo apt purge google-chrome-stable
    - uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
        restore-keys: | 
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r entrainement/requirements.txt
    - name: Install dependencies for testings
      run: |
        pip install DateTime
    - name: Run pytest
      run: | 
        pytest --disable-warnings entrainement/tests/

  # build-and-deploy:
  #   # needs: [test-api, test-entrainement]
  #   runs-on: ubuntu-latest
  #  mongoimport --jsonArray --db test --collection stations --file /initMongo/dataMongo/stations.json
  #       mongoimport --jsonArray --db test --collection schoolVacations --file /initMongo/dataMongo/schoolVacations.json
  #       mongoimport --jsonArray --db test --collection riskStations --file /initMongo/dataMongo/riskStations.json
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v2

  #     - name: Azure Login & Delete groupe of container if exist
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Delete groupe of container if exist
  #       uses: azure/CLI@v1
  #       with:
  #         azcliversion: 2.29.2
  #         inlineScript: |
  #           az login --service-principal -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} --tenant ${{ secrets.REGISTRY_TENANT_ID }}
  #           az container delete --name mlops-londonpump --resource-group ${{ secrets.RESOURCE_GROUP }} --yes --subscription ${{ secrets.SUBSCRIPTION_ID }}

  #     - name: Azure get vault
  #       uses: Azure/get-keyvault-secrets@v1
  #       with: 
  #         keyvault: "secret-londonfire"
  #         secrets: 'PythonEnv, SeleniumHost, JwtSecretKey, JwtAlgorithm, RefreshTokenExpire, AccessTokenExpire, VisualCrossingKey, MongoDbLondonFireUser, MongoDbLondonFirePassword, MongoInitDbHost, MongoDbInitDatabase, MongoInitDbRootPassword, MongoInitDbRootUsername, AirflowUsername, AirflowPassword'
  #       id: myGetSecretAction

  #     - name: create env file
  #       run: |
  #         touch .env.production
  #         echo MONGO_INITDB_ROOT_USERNAME=${{ steps.myGetSecretAction.outputs.MongoInitDbRootUsername }} >> .env.production
  #         echo MONGO_INITDB_ROOT_PASSWORD=${{ steps.myGetSecretAction.outputs.MongoInitDbRootPassword }} >> .env.production
  #         echo MONGO_INITDB_DATABASE=${{ steps.myGetSecretAction.outputs.MongoDbInitDatabase }} >> .env.production
  #         echo MONGO_INITDB_HOST=${{ steps.myGetSecretAction.outputs.MongoInitDbHost }} >> .env.production
  #         echo MONGO_LONDON_FIRE_USER=${{ steps.myGetSecretAction.outputs.MongoDbLondonFireUser }} >> .env.production
  #         echo MONGO_LONDON_FIRE_PASSWORD=${{ steps.myGetSecretAction.outputs.MongoDbLondonFirePassword }} >> .env.production
  #         echo AIRFLOW_USERNAME=${{ steps.myGetSecretAction.outputs.AirflowUsername }} >> .env.production
  #         echo AIRFLOW_PASSWORD=${{ steps.myGetSecretAction.outputs.AirflowPassword }} >> .env.production
  #         echo VISUAL_CROSSING_KEY=${{ steps.myGetSecretAction.outputs.VisualCrossingKey }} >> .env.production
  #         echo ACCESS_TOKEN_EXPIRES_IN=${{ steps.myGetSecretAction.outputs.AccessTokenExpire }} >> .env.production
  #         echo REFRESH_TOKEN_EXPIRES_IN=${{ steps.myGetSecretAction.outputs.RefreshTokenExpire }} >> .env.production
  #         echo JWT_ALGORITHM=${{ steps.myGetSecretAction.outputs.JwtAlgorithm }} >> .env.production
  #         echo JWT_SECRET_KEY=${{ steps.myGetSecretAction.outputs.JwtSecretKey }} >> .env.production
  #         echo SELENIUM_HOST=${{ steps.myGetSecretAction.outputs.SeleniumHost }} >> .env.production
  #         echo PYTHON_ENV=${{ steps.myGetSecretAction.outputs.PythonEnv }} >> .env.production

  #     - name: Connect to Azure Container Registry (ACR)
  #       uses: azure/docker-login@v1
  #       with:
  #         login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  #         username: ${{ secrets.REGISTRY_USERNAME }}
  #         password: ${{ secrets.REGISTRY_PASSWORD }}

  #     - name: Build and push Docker images
  #       run: |
  #         docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/api:latest -f api/Dockerfile
  #         docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/api:latest
  #         docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/entrainement:latest -f entrainement/Dockerfile
  #         docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/entrainement:latest
  #         docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/mongo-londonfire:latest -f initMongo/Dockerfile
  #         docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/mongo-londonfire:latest
  #         docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/airflow-londonfire:latest -f airflow/Dockerfile
  #         docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/airflow-londonfire:latest

  #     - name: Deploy to Azure Container Instance
  #       run: |
  #         sudo curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sudo sh
  #         docker login azure --client-id ${{ secrets.REGISTRY_USERNAME }} --client-secret ${{ secrets.REGISTRY_PASSWORD }} --tenant-id ${{ secrets.REGISTRY_TENANT_ID }}
  #         docker context create aci myacicontext --resource-group ${{ secrets.RESOURCE_GROUP }}
  #         docker context use myacicontext
  #         docker compose -f docker-compose.prod.yml up
