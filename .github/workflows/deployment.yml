name: deploy-prod

on:
  push:
    branches: [ DeployOnCloud ]

jobs:
  test-api:
    env:
      DATABASE_URL: mongodb://localhost:27017/test?retryWrites=true&w=majority
      MONGO_INITDB_DATABASE: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.8.0
      with:
        mongodb-version: "4.2"
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
        restore-keys: | 
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
    - name: Run pytest
      run: | 
        pytest api/tests/

  build-and-deploy:
    # needs: test-api
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Azure Login & Delete groupe of container if exist
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Delete groupe of container if exist
      #   uses: azure/CLI@v1
      #   with:
      #     azcliversion: 2.29.2
      #     inlineScript: |
      #       az login --service-principal -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} --tenant ${{ secrets.REGISTRY_TENANT_ID }}
      #       az container delete --name mlops-londonpump --resource-group ${{ secrets.RESOURCE_GROUP }} --yes --subscription ${{ secrets.SUBSCRIPTION_ID }}

      - name: Azure get vault
        uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: "secret-londonfire"
          secrets: 'PythonEnv, SeleniumHost, JwtSecretKey, JwtAlgorithm, RefreshTokenExpire, AccessTokenExpire, VisualCrossingKey, DatabaseUrl, MongoDbLondonFireUser, MongoDbLondonFirePassword, MongoInitDbHost, MongoDbInitDatabase, MongoInitDbRootPassword, MongoInitDbRootUsername'
        id: myGetSecretAction

      - name: create env file
        run: |
          touch .env.production
          echo MONGO_INITDB_ROOT_USERNAME=${{ steps.myGetSecretAction.outputs.MongoInitDbRootUsername }} >> .env.production
          echo MONGO_INITDB_ROOT_PASSWORD=${{ steps.myGetSecretAction.outputs.MongoInitDbRootPassword }} >> .env.production
          echo MONGO_INITDB_DATABASE=${{ steps.myGetSecretAction.outputs.MongoDbInitDatabase }} >> .env.production
          echo MONGO_INITDB_HOST=${{ steps.myGetSecretAction.outputs.MongoInitDbHost }} >> .env.production
          echo MONGO_LONDON_FIRE_USER=${{ steps.myGetSecretAction.outputs.MongoDbLondonFireUser }} >> .env.production
          echo MONGO_LONDON_FIRE_PASSWORD=${{ steps.myGetSecretAction.outputs.MongoDbLondonFirePassword }} >> .env.production
          echo DATABASE_URL=${{ steps.myGetSecretAction.outputs.DatabaseUrl }} >> .env.production
          echo VISUAL_CROSSING_KEY=${{ steps.myGetSecretAction.outputs.VisualCrossingKey }} >> .env.production
          echo ACCESS_TOKEN_EXPIRES_IN=${{ steps.myGetSecretAction.outputs.AccessTokenExpire }} >> .env.production
          echo REFRESH_TOKEN_EXPIRES_IN=${{ steps.myGetSecretAction.outputs.RefreshTokenExpire }} >> .env.production
          echo JWT_ALGORITHM=${{ steps.myGetSecretAction.outputs.JwtAlgorithm }} >> .env.production
          echo JWT_SECRET_KEY=${{ steps.myGetSecretAction.outputs.JwtSecretKey }} >> .env.production
          echo SELENIUM_HOST=${{ steps.myGetSecretAction.outputs.SeleniumHost }} >> .env.production
          echo PYTHON_ENV=${{ steps.myGetSecretAction.outputs.PythonEnv }} >> .env.production

      - name: Deploy to Azure Container Instance
        run: |
          sudo curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sudo sh
          docker login azure --client-id ${{ secrets.REGISTRY_USERNAME }} --client-secret ${{ secrets.REGISTRY_PASSWORD }} --tenant-id ${{ secrets.REGISTRY_TENANT_ID }}
          docker context create aci myacicontext --resource-group ${{ secrets.RESOURCE_GROUP }}
          docker context use myacicontext
          docker compose -f docker-compose.prod.yml up
