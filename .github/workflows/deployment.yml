name: deploy-prod

on:
  push:
    branches: [ DeployOnCloud ]

jobs:
  test-api:
    env:
      DATABASE_URL: mongodb://localhost:27017/test?retryWrites=true&w=majority
      MONGO_INITDB_DATABASE: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.8.0
      with:
        mongodb-version: "4.2"
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
        restore-keys: | 
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
    - name: Run pytest
      run: | 
        pytest api/tests/

  build-and-deploy:
    # needs: test-api
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure get vault
        uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: "secret-londonfire"
          secrets: 'PythonEnv, SeleniumHost, JwtSecretKey, JwtAlgorithm, RefreshTokenExpire, AccessTokenExpire, VisualCrossingKey, DatabaseUrl, MongoDbLondonFireUser, MongoDbLondonFirePassword, MongoInitDbHost, MongoDbInitDatabase, MongoInitDbRootPassword, MongoInitDbRootUsername'
        id: myGetSecretAction

      - name: Docker Login
        uses: azure/docker-login@v1
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ steps.myGetSecretAction.outputs.MongoInitDbRootUsername }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ steps.myGetSecretAction.outputs.MongoInitDbRootPassword }}
          MONGO_INITDB_DATABASE: ${{ steps.myGetSecretAction.outputs.MongoDbInitDatabase }}
          MONGO_INITDB_HOST: ${{ steps.myGetSecretAction.outputs.MongoInitDbHost }}
          MONGO_LONDON_FIRE_USER: ${{ steps.myGetSecretAction.outputs.MongoDbLondonFireUser }}
          MONGO_LONDON_FIRE_PASSWORD: ${{ steps.myGetSecretAction.outputs.MongoDbLondonFirePassword }}
          DATABASE_URL: ${{ steps.myGetSecretAction.outputs.DatabaseUrl }}
          VISUAL_CROSSING_KEY: ${{ steps.myGetSecretAction.outputs.VisualCrossingKey }}
          ACCESS_TOKEN_EXPIRES_IN: ${{ steps.myGetSecretAction.outputs.AccessTokenExpire }}
          REFRESH_TOKEN_EXPIRES_IN: ${{ steps.myGetSecretAction.outputs.RefreshTokenExpire }}
          JWT_ALGORITHM: ${{ steps.myGetSecretAction.outputs.JwtAlgorithm }}
          JWT_SECRET_KEY: ${{ steps.myGetSecretAction.outputs.JwtSecretKey }}
          SELENIUM_HOST: ${{ steps.myGetSecretAction.outputs.SeleniumHost }}
          PYTHON_ENV: ${{ steps.myGetSecretAction.outputs.PythonEnv }}
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker login azure --client-id ${{ secrets.REGISTRY_USERNAME }} --client-secret ${{ secrets.REGISTRY_PASSWORD }} --tenant-id ${{ secrets.REGISTRY_TENANT_ID }}
          docker context create aci myacicontext
          docker context use myacicontext
          docker-compose -f docker-compose.prod.yml up

      # - uses: actions/checkout@v1
      #   env:
      #     MONGO_INITDB_ROOT_USERNAME: ${{ steps.myGetSecretAction.outputs.MongoInitDbRootUsername }}
      #     MONGO_INITDB_ROOT_PASSWORD: ${{ steps.myGetSecretAction.outputs.MongoInitDbRootPassword }}
      #     MONGO_INITDB_DATABASE: ${{ steps.myGetSecretAction.outputs.MongoDbInitDatabase }}
      #     MONGO_INITDB_HOST: ${{ steps.myGetSecretAction.outputs.MongoInitDbHost }}
      #     MONGO_LONDON_FIRE_USER: ${{ steps.myGetSecretAction.outputs.MongoDbLondonFireUser }}
      #     MONGO_LONDON_FIRE_PASSWORD: ${{ steps.myGetSecretAction.outputs.MongoDbLondonFirePassword }}
      #     DATABASE_URL: ${{ steps.myGetSecretAction.outputs.DatabaseUrl }}
      #     VISUAL_CROSSING_KEY: ${{ steps.myGetSecretAction.outputs.VisualCrossingKey }}
      #     ACCESS_TOKEN_EXPIRES_IN: ${{ steps.myGetSecretAction.outputs.AccessTokenExpire }}
      #     REFRESH_TOKEN_EXPIRES_IN: ${{ steps.myGetSecretAction.outputs.RefreshTokenExpire }}
      #     JWT_ALGORITHM: ${{ steps.myGetSecretAction.outputs.JwtAlgorithm }}
      #     JWT_SECRET_KEY: ${{ steps.myGetSecretAction.outputs.JwtSecretKey }}
      #     SELENIUM_HOST: ${{ steps.myGetSecretAction.outputs.SeleniumHost }}
      #     PYTHON_ENV: ${{ steps.myGetSecretAction.outputs.PythonEnv }}
      # - run: |
      #     sudo curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sudo sh
      #     docker -v
      #     docker login azure
      #     docker context create aci myacicontext
      #     docker context use myacicontext
      #     docker-compose -f docker-compose.prod.yml up

